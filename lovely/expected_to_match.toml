[manifest]
version = "1.0.0"
dump_lua = true
priority = 11

# stupid implementation because steamodded didn't accept my PR (could possibly rewrite using events instead)
# Move seed generation to be before Back:apply and Stake.modifiers() so that both methods can use the seed and true pseudorandom numbers
# Needs to have later priority than Cryptid
# Game:start_run (both patches)
[[patches]]
[patches.pattern]
target = "game.lua"
pattern = '''
if not saveTable then
    if args.seed then self.GAME.seeded = true end
    self.GAME.pseudorandom.seed = args.seed or (not (G.SETTINGS.tutorial_complete or G.SETTINGS.tutorial_progress.completed_parts['big_blind']) and "TUTORIAL") or generate_starting_seed()
end

for k, v in pairs(self.GAME.pseudorandom) do if v == 0 then self.GAME.pseudorandom[k] = pseudohash(k..self.GAME.pseudorandom.seed) end end
self.GAME.pseudorandom.hashed_seed = pseudohash(self.GAME.pseudorandom.seed)
'''
match_indent = true
position = "at"
payload = '''
-- moved this code to earlier in the function (by CardSleeves)
--[[
if not saveTable then
    if args.seed then self.GAME.seeded = true end
    self.GAME.pseudorandom.seed = args.seed or (not (G.SETTINGS.tutorial_complete or G.SETTINGS.tutorial_progress.completed_parts['big_blind']) and "TUTORIAL") or generate_starting_seed()
end

for k, v in pairs(self.GAME.pseudorandom) do if v == 0 then self.GAME.pseudorandom[k] = pseudohash(k..self.GAME.pseudorandom.seed) end end
self.GAME.pseudorandom.hashed_seed = pseudohash(self.GAME.pseudorandom.seed)
--]]
'''
[[patches]]
[patches.pattern]
target = "game.lua"
pattern = '''self.GAME.selected_back_key = selected_back'''
match_indent = true
position = "after"
payload = '''

if not saveTable then
    if args.seed then self.GAME.seeded = true end
    self.GAME.pseudorandom.seed = args.seed or (not (G.SETTINGS.tutorial_complete or G.SETTINGS.tutorial_progress.completed_parts["big_blind"]) and "TUTORIAL") or generate_starting_seed()
end
for k, v in pairs(self.GAME.pseudorandom) do if v == 0 then self.GAME.pseudorandom[k] = pseudohash(k..self.GAME.pseudorandom.seed) end end
self.GAME.pseudorandom.hashed_seed = pseudohash(self.GAME.pseudorandom.seed)
'''

# allow stake sticker to have rotation and positional offset - backwards compat for smods versions before DrawStep
# Card:draw()
[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = '''
G.shared_stickers[self.sticker]:draw_shader('dissolve', nil, nil, true, self.children.center)
if self.sticker == 'Gold' then G.shared_stickers[self.sticker]:draw_shader('voucher', nil, self.ARGS.send_to_shader, true, self.children.center) end
'''
position = 'at'
match_indent = true
payload = '''
local sticker_offset = self.sticker_offset or {}
G.shared_stickers[self.sticker]:draw_shader('dissolve', nil, nil, true, self.children.center, nil, self.sticker_rotation, sticker_offset.x, sticker_offset.y)
if self.sticker == 'Gold' or self.sticker == 'gold' then G.shared_stickers[self.sticker]:draw_shader('voucher', nil, self.ARGS.send_to_shader, true, self.children.center, nil, self.sticker_rotation, sticker_offset.x, sticker_offset.y) end
'''

# allow custom subtext in notify alert (the pop-up on the right side of the screen)
# create_UIBox_notify_alert(...)
[[patches]]
[patches.pattern]
target = 'functions/UI_definitions.lua'
pattern = """_type == 'Back' and localize('k_deck') or 'ERROR'"""
position = 'at'
match_indent = true
payload = """_type == 'Back' and localize('k_deck') or
_c.set and localize('k_' .. _c.set:lower()) or
'ERROR'
"""

# adds Sleeves to the collection counter
# set_discover_tallies()
[[patches]]
[patches.pattern]
target = 'functions/misc_functions.lua'
pattern = """if v.set and ((v.set == 'Joker') or v.consumeable or (v.set == 'Edition') or (v.set == 'Voucher') or (v.set == 'Back') or (v.set == 'Booster')) then"""
position = 'before'
match_indent = true
payload = """if v.set and v.set == 'Sleeve' then
    G.DISCOVER_TALLIES.total.of = G.DISCOVER_TALLIES.total.of + 1
    if v.unlocked then
        G.DISCOVER_TALLIES.total.tally = G.DISCOVER_TALLIES.total.tally + 1
    end
end"""

# adds context for shop_final_pass to sleeves
# Game:update_shop()
[[patches]]
[patches.pattern]
target = 'game.lua'
pattern = """G.CONTROLLER:snap_to({node = G.shop:get_UIE_by_ID('next_round_button')})"""
position = 'before'
match_indent = true
payload = """
if CardSleeves then
    -- CardSleeves custom context stuff
    G.E_MANAGER:add_event(Event({
        delay = 0.01,  --  because stupid fucking tags not applying immediately
        blockable = true,
        trigger = 'after',
        func = function()
            local sleeve_center = CardSleeves.Sleeve:get_obj(G.GAME.selected_sleeve or "sleeve_casl_none")
            sleeve_center:trigger_effect{context = "shop_final_pass"}
            if type(sleeve_center.calculate) == "function" then sleeve_center:calculate(sleeve_center, {shop_final_pass = true}) end
            return true
        end
    }))
end
"""
